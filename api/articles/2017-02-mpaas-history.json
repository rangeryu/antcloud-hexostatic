{"title":"蚂蚁云mPaaS移动平台在支付宝App的演进和实践","slug":"2017-02-mpaas-history","date":"2017-02-05T16:00:00.000Z","updated":"2017-03-08T12:03:00.000Z","comments":true,"path":"api/articles/2017-02-mpaas-history.json","excerpt":"在支付宝业务重心全情投入无线移动平台的这四年多以来，支付宝移动App的用户和日活的数量每年都在成倍增长，对应的研发团队人数也扩张了十几倍，支付宝功能和业务也在不断推陈出新，支付宝App本身承载的功能模块使其已经演化成了一个移动互联网时代的超级App。蚂蚁云mPaaS移动平台来源于支付宝移动技术十年的技术积累和沉淀，是把客户端、服务端和网络技术开放出来的产品化框架和平台。蚂蚁金服旗下的智慧理财平台蚂蚁聚宝、网商银行、天弘爱理财等金融级移动App都已经应用了同一套框架和移动云平台。","content":"<p>在支付宝业务重心全情投入无线移动平台的这四年多以来，支付宝移动App的用户和日活的数量每年都在成倍增长，对应的研发团队人数也扩张了十几倍，支付宝功能和业务也在不断推陈出新，支付宝App本身承载的功能模块使其已经演化成了一个移动互联网时代的超级App。</p>\n<p>蚂蚁云mPaaS移动平台来源于支付宝移动技术十年的技术积累和沉淀，是把客户端、服务端和网络技术开放出来的产品化框架和平台。<br>蚂蚁金服旗下的智慧理财平台<a href=\"https://www.antfortune.com/\" target=\"_blank\" rel=\"external\">“蚂蚁聚宝”</a>、“无微不至”的<a href=\"https://www.mybank.cn/\" target=\"_blank\" rel=\"external\">“网商银行”</a>、合作伙伴天弘基金的<a href=\"http://app.thfund.com.cn/\" target=\"_blank\" rel=\"external\">“天弘爱理财”</a>等金融级移动App都已经应用了同一套框架和移动云平台。</p>\n<p>随着mPaaS<a href=\"TechBlog/mpaas/IntroducingMPaas.md\">公测正式开启</a>，为了让大家更直观地了解mPaaS的产品特性和设计理念，体验支付宝移动技术的“黑科技”，我们将通过这篇文章介绍支付宝客户端的演进过程，在不断满足支付宝的业务需求、使这个超级App变的越来越灵活、开放、可靠、稳定且高效的同时，我们把这些能力和技术开放出来并产品化，使我们的生态伙伴也能够享受蚂蚁在移动开发方面云和端的沉淀和成果，使移动创新更灵动。</p>\n<h2 id=\"一、架构发展演进及挑战\"><a href=\"#一、架构发展演进及挑战\" class=\"headerlink\" title=\"一、架构发展演进及挑战\"></a>一、架构发展演进及挑战</h2><p>在产品发生巨大变化的同时，技术架构上也发生了巨大的变化。总体来看分为三个阶段：</p>\n<p><img src=\"https://zos.alipayobjects.com/rmsportal/iLRyCfhHFsQXBSwDQrSF.png\" alt=\"Alipay App架构演进\"></p>\n<h3 id=\"1-早期单体应用，主要为支付服务\"><a href=\"#1-早期单体应用，主要为支付服务\" class=\"headerlink\" title=\"1. 早期单体应用，主要为支付服务\"></a>1. 早期单体应用，主要为支付服务</h3><p>早期支付宝App从架构上来看是一个简单的单体应用，只是在逻辑和程序结构上把业务模块同基础工具库分开，然而应用之间依旧可能相互依赖，有较高的耦合度。上百人的研发团队在做模块变更很有可能牵一发而动全身，发布和变更收到了很大限制，也对整体稳定性带来很大挑战。</p>\n<h3 id=\"2-平台型模块化应用，金融级移动互联网架构\"><a href=\"#2-平台型模块化应用，金融级移动互联网架构\" class=\"headerlink\" title=\"2. 平台型模块化应用，金融级移动互联网架构\"></a>2. 平台型模块化应用，金融级移动互联网架构</h3><p>2013年到2015年，支付宝变成了一个服务化、模块化的平台型应用，许多关键功能特性被抽象出来成为基础组件服务，如用户行为追踪及埋点、日志监控、安全管控、统一网关、H5容器等等，各个模块能专注业务逻辑，而不必各自重复制造那些共享的“轮子”。此时支付宝App中有将近一半的业务使用了H5承载页面交互，许多H5 Web开发工程师加入了iOS、Android为主的移动技术部。不同团队能够类似开发独立子应用一样并行研发，互相不会过多干扰，而最终在编译时甚至运行时各个模块才汇集成一个主应用。</p>\n<h3 id=\"3-为开放生态服务的超级App，生活互动型架构\"><a href=\"#3-为开放生态服务的超级App，生活互动型架构\" class=\"headerlink\" title=\"3. 为开放生态服务的超级App，生活互动型架构\"></a>3. 为开放生态服务的超级App，生活互动型架构</h3><p>2015年之后，我们发现支付宝不仅需要面对内部的各个部门做功能模块的开发，而且各个行业的应用都会往支付宝上去投放，整体来看是一个多应用的生态。技术上主要实现了开放和动态化，动态化是指不同的应用能够很快速的开发并且投放到支付宝上来，而且能够分发到不同需要的用户上去。对于超级App来说，关键要做到高可用、高性能、高灵敏度。  </p>\n<p>研发团队不断地在重构业务流程代码，在优化性能的同时，也在为应用进行瘦身。当前业务模块的主要实现思路是，对关键高频业务依旧使用原生Native代码实现界面和逻辑，对新上线的以及低频业务模块则主要通过动态H5页面来实现。许多公共服务、第三方子应用通过统一的支付宝前端UI框架以近乎移动端网页的形式入驻支付宝App，并能通过平台所提供的jsAPI bridge同主应用进行交互，带给用户如原生应用一般的体验。</p>\n<p>mPaaS框架在此时也走上了开放产品化路线，同时云端及客户端组件都走向了标准化，随着蚂蚁金服的业务扩张，蚂蚁聚宝、网商银行、天弘基金等App都基于mPaaS框架平台快速构建，在很短的时间内完成了从设计到发布并不断迭代，通过全方位监控和智能运营，全生命周期地贯彻DevOps理念。</p>\n<h2 id=\"二、技术挑战\"><a href=\"#二、技术挑战\" class=\"headerlink\" title=\"二、技术挑战\"></a>二、技术挑战</h2><p>支付宝业务的复杂性及变化对移动技术和平台带来了非常大的挑战： </p>\n<ul>\n<li><p><strong>用户规模成倍增长</strong>，每年双十一、双十二大促活动所带来的峰值流量对应用整体<strong>性能、稳定性</strong>带来非常大的考验，作为一个与金融生活息息相关的产品，任何千分之几、万分之几的低概率异常都有可能影响到<strong>数万甚至百万用户和移动设备</strong>。 </p>\n</li>\n<li><p>随着深入农村及国际化的进程，<strong>入门级移动设备数量</strong>占比越来越多，机型趋向于碎片化，<strong>网络条件严苛</strong>。 </p>\n</li>\n<li><p>从研发层面来看，<strong>代码量迅速增长</strong>，数百人的大团队维护及不断更新着几百个模块和几百万行代码，既要<strong>高效协同</strong>开发，又要做到<strong>敏捷响应</strong>业务诉求。</p>\n</li>\n</ul>\n<h3 id=\"性能挑战\"><a href=\"#性能挑战\" class=\"headerlink\" title=\"性能挑战\"></a>性能挑战</h3><p>即使硬件发展更迭迅速，对于性能和稳定性的追求依然是工程团队追求的重要目标。随着业务的发展，未来广义性能问题会变得越来越重要，支付宝内部有专门的团队负责性能优化，不仅仅关于业务代码，更多是核心框架、内核级的改进以及网络通讯协议层级的优化。</p>\n<ul>\n<li><p>狭义的性能目标是指<strong>启动时间、流畅度和卡顿情况</strong>等，这是用户对应用的最直观感受。在线下支付场景，掏出手机进入支付条码页面的整个过程，每降低哪怕半秒钟都会对用户带来非常直观的体验改进。</p>\n</li>\n<li><p>网络通讯性能。有些极端网络条件下，手机浏览器都打不开网页或者极慢，而支付宝App是使用却毫无压力，这背后来源于支付宝网络团队在协议层级别的优化。</p>\n</li>\n<li><p>除了传统的性能问题之外，还有许多诸如<strong>流量、电量、内存、存储</strong>等广义的性能问题，这些广义性能问题潜移默化地影响着用户体验和对应用的直观评价。</p>\n</li>\n</ul>\n<h3 id=\"稳定性挑战\"><a href=\"#稳定性挑战\" class=\"headerlink\" title=\"稳定性挑战\"></a>稳定性挑战</h3><p>稳定性问题包括：启动闪退、启动卡死、Crash（崩溃）、ANR（无响应）。</p>\n<p>随着用户量的增长，传统的鉴定Crash的方法需要做一些调整。我们需要关注的问题是每天有多少人因为稳定性问题使用不了支付宝。所以我们把以前Crash的单纯定义做了一些细化，将总体的Crash细化为一次性的Crash和持久性的Crash，期望将持久性的Crash降到很低。另外，考虑到后台Crash对用户的影响还是可控的，所以我们还将Crash分为前台Crash、后台Crash。除了Java层的闪退之外，对Native层的闪退关注是更多的。</p>\n<h2 id=\"三、移动端高可用-超级App的运维体系\"><a href=\"#三、移动端高可用-超级App的运维体系\" class=\"headerlink\" title=\"三、移动端高可用 - 超级App的运维体系\"></a>三、移动端高可用 - 超级App的运维体系</h2><blockquote>\n<p>相关能力请关注mPaaS的监控服务和发布服务</p>\n</blockquote>\n<p>在关注服务端技术时，高可用（High Availability，HA）、灾难恢复(Failover，FO)等的概念一直伴随着异地多活、两地三中心、负载均衡、主备切换等词汇出现。在服务器端出现问题时，可以通过回滚等方法及时修复，但是在客户端出现问题时会比较麻烦，所以需要从架构方面对整个容灾能力做新的规划。把客户端出现的各种异常做一个抽象，然后提取出来各种特征，在服务器端针对这些特征配置相应的应对方法。而支付宝为移动端高可用而做出了对于<strong>监控、诊断、修复</strong>发布方面的努力，组成了这个超级App的运维体系。</p>\n<ul>\n<li>线上异常监控</li>\n</ul>\n<p>在客户端埋点，把一些关键的流程上通过切片技术布置监控，以全面地量化性能指标和稳定性事件，基本做到了99%以上的覆盖率，保证极端情况下的闪退、启动卡死、操作无响应的问题可以被及时追溯到。</p>\n<p>在服务器端，当问题出现时能够及时自动报警，及时分析异常，帮助提取错误所产生的特征，如网络、设备型号、错误情况和操作日志等等，通知不同的团队其对应模块的健康状况。</p>\n<p>在数据分析上，利用各种图表、维度将数据展现出来，让工程团队能够看到对应错误的均值、分布、尾部，判断不同版本条件下的同比对比情况，方便出现问题时进行回滚。</p>\n<ul>\n<li>快速定位与诊断</li>\n</ul>\n<p>支付宝App的客户框架对于客户端故障问题的定位诊断作了许多基础实现。以确保出线问题时能立即高效便捷地获取诊断信息，并及时分配到对应的负责团队和工程师。</p>\n<p>每个部分出现问题的时候，比如CPU出现问题的时候把线程的调用栈打出来，并且获得线程消耗的时间，这样才能得知那个线程消耗时间比较多；自动收集高耗时以及异常的网络访问Url和RPC接口，直接映射到对应的业务模块；自动获取闪退发生时的辅助信息如调用栈、日志等信息。</p>\n<ul>\n<li>问题修复和发布：动态化整体解决方案</li>\n</ul>\n<p>支付宝App采用了多层次的动态化技术以确保从应用配置信息、动态页面、Native代码补丁甚至整个模块能够及时地定向推送到客户端。  </p>\n<ol>\n<li>配置同步：100%到达率，同步、推送相结合，连接即触达。很多场景只需要一个配置就行，这是最基础的一个动态化，但是很有学问，需要保证配置能够快速到达客户端，并且做好同步操作。</li>\n<li>H5：快速的web发布方式；加载和渲染速度，预加载+离线包，回滚机制，离线在线无缝切换。用来做开放和承接外面的业务，以及支付宝内部要求不是很高但是动态化要求比较高的业务。</li>\n<li>跨平台框架：实时发布，覆盖率高；加载和渲染速度大量提升；包比native小一半。如果对性能有要求的话，使用跨平台框架，用来兼顾开放、动态化、性能的要求。</li>\n<li>Hotpatch：Native代码修复，成功率高，同步、推送相结合，跨平台，尺寸小。</li>\n<li>Native：全功能的模块化发布，支持把整个Bundle替换掉。</li>\n</ol>\n<p>我们通过移动分析能够让分析用户App的操作行为、运行日志、网络状况更简单。如果出现异常的情况下我们还能做什么？Hotpatch。当移动App出现问题时，通常一个小时内就能解决。传统的移动开发会怎么样？App好不容易发布到苹果商店和各大安卓App市场，全部更新一遍差不多一周就过去了。Hotpatch产品能让你数小时之内解决你的产品，让你的产品更符合用户的体验，更让用户满意，更能应对安全的状况。</p>\n<h2 id=\"四、无线网络技术\"><a href=\"#四、无线网络技术\" class=\"headerlink\" title=\"四、无线网络技术\"></a>四、无线网络技术</h2><p>用户往往会注意到日常使用时，常常会出现数据加载失败、图片显示不出来、页面加载失败等情况；更可能会因为速度慢，某个网络操作需要等上3-5秒而感到不悦。而这些现象背后，就明显能体现出无线网络相比与当前的有线网络在速度以及稳定性上的不足。更进一步的剖析，我们会发现，无线网络整体的挑战包括几个方面：</p>\n<ol>\n<li>无线网络的非实时在线特性以及复杂的网络环境，表现出“高延时”、“低带宽”、“高丢包率”、“高误码率”、“不稳定不可靠”等网络现象。</li>\n<li>碎片化，随时随地的用户使用习惯。</li>\n<li>终端受限：流量费用贵、电量有限。</li>\n</ol>\n<p>蚂蚁现在的无线网络技术，发展源头应该追溯到2013年，当时正在进行支付宝App整体大重构，研发了自己的移动RPC协议和API服务网关。同年底，移动服务已经细粒度到了上百个。</p>\n<p>2014年初，我们将<a href=\"https://zh.wikipedia.org/zh-hans/SPDY\" target=\"_blank\" rel=\"external\">SPDY</a>发布上线，取得了不错的提升效果，网络访问的并发性能大大改善，尝到甜头后的网络性能优化就开始持续开展了起来，比如<a href=\"https://yq.aliyun.com/articles/7925\" target=\"_blank\" rel=\"external\">HTTPDNS</a>、安全协议精简、上行GZIP压缩，而比请求响应更高级的增量更新（SYNC）也在这一年上线了。</p>\n<p>2015年，支付宝APP开始进行社交的尝试，这对无线网络技术提出了更高的要求。我们决定对终端网络及接入进行架构重构：放弃了原来的HTTP、SPDY协议，设计更适合移动网络的自定义协议MMTP；在不降低安全等级的基础上，研发了支持0-RTT的MTLS。这一年可以说是蚂蚁无线网络技术发展最快的一年，我们进行了大量的试错和思考，从代码调优到终端网络再到业务治理，沉淀了不少有效的策略。 </p>\n<h3 id=\"移动网关\"><a href=\"#移动网关\" class=\"headerlink\" title=\"移动网关\"></a>移动网关</h3><blockquote>\n<p>相关能力请关注mPaaS的网关服务</p>\n</blockquote>\n<p>对于大多数移动研发和运维人员来说，最需要解决的就是网络耗时高、失败率高的问题，最直接有效的方法是选择一个网关服务，直接负责和客户端App的通讯，并通过优化网络协议，精简业务传输的大小和流程，做好失败的快速重试，提升移动服务的可靠性。  </p>\n<p>我们可以直白地理解网关服务是作为移动设备和后台网络接口之间的加速反向代理。对各种网络连接做了深度优化，确保在弱网条件下也能够保持连接，提高通讯效率。移动App通过统一的网关来调用后台服务，而不是直接通过后台服务自己的域名或IP来进行tcp、http等调用。mPaaS平台支持根据网关接口定义，自动生成客户端接口和代码实现。客户端代理类抽象了网络层的协议，开发者可以像调用本地方法一样直接调用网关接口，而无需管理网络连接等。</p>\n<p>通过网关，我们可以简单、安全、高效地统一管理客户端对服务端的各种请求，实现服务注册发现、路由管控、安全校验、流量监控等能力。比如说为了保证数据的安全，我们做了一些数据安全的处理。例如你又害怕被网络攻击，我们要保证是我们自己的APP调用我们的网关，不是别人调用，我们做了成套签名机制，保证你的网关是安全的。另外App上线之后肯定做一些运营活动，比如说秒杀，忽然量起来了之后，就像“双十一”活动之后网关上还可以提供限流管控的能力。</p>\n<h3 id=\"移动推送\"><a href=\"#移动推送\" class=\"headerlink\" title=\"移动推送\"></a>移动推送</h3><blockquote>\n<p>相关能力请关注mPaaS的推送服务</p>\n</blockquote>\n<p>现在你有了一个移动APP，而且你已经把这个产品推出去了，下面怎么办？我想运营，我想出一些运营的方案。但这些运营方案怎么能够更好地触达用户呢？没错，我们想通过push方式能让更多用户知道你我今天发布了什么样新产品，我今天有什么样新活动产生。我们的移动App能够让这件事情做得更容易，我们能够保证1亿用户三秒钟触达，1、2、3，1亿用户收到你的push，是不是很壮观？</p>\n<p>支付宝消息推送系统承担着支付宝各个业务以及部分聊天消息的推送任务，其中iOS客户端通过苹果公司标准APNS推送通道，Android系统通过客户端自建长连接进程进行推送，亦同时支持谷歌的标准GCM服务推送。多年来的不断演进和发展，已经在响应时间、到达率、并发量、客户端长连接保活等关键指标方面取得突破。同样的技术和网络基础设施现已通过mPaaS平台开放。</p>\n<h2 id=\"五、移动安全\"><a href=\"#五、移动安全\" class=\"headerlink\" title=\"五、移动安全\"></a>五、移动安全</h2><blockquote>\n<p>支付宝的移动安全技术源自于<a href=\"https://jaq.alibaba.com\" target=\"_blank\" rel=\"external\">‘阿里聚安全’移动安全解决方案</a></p>\n<p>阿里聚安全平台已在阿里集团内部服务多年，经历了各种风险考验，现在我们将丰富的安全服务经验开放出来，为您提供支付宝、手机淘宝级的安全防护。“安全组件SDK和应用加固为主，恶意代码扫描和仿冒监测为辅”的防护方案，能为金融类应用发现潜在风险，并以安全SDK和加固结合的形式升级安全保护能力，极大降低应用被攻击的风险、保护应用机密数据、减少市场仿冒量，进而保护用户资产和开发者的合法权益，保障金融机构在移动端的健康发展。</p>\n</blockquote>\n<p>随着移动互联网的快速发展，传统的金融支付手段被搬到了手机屏幕上，移动支付应用、手机银行等金融类应用为用户带来了巨大的便捷。然而，由于金融应用直接与用户的交易、资金紧密相关，此类应用也成为了欺诈者与黑客竟相攻击的对象。支付宝支付体系的安全能力积累，目前覆盖支付宝的安全架构，有效的减少App被反编译、被破解的风险，so库核心文件得到保护，账号密码泄漏风险减少，保护用户资金安全，一共包括以下几大方面：</p>\n<ul>\n<li>安全扫描：快速扫描APP漏洞、恶意代码以及仿冒应用</li>\n</ul>\n<p>在风险发现中，阿里聚安全提供漏洞扫描和仿冒监测服务。漏洞扫描服务可帮助金融应用开发者迅速发现应用中的漏洞，及时有效防止用户信息泄露和资金损失。仿冒监测服务能够监测数百个渠道、网盘、论坛等全网范围内的仿冒软件，为正版应用开发者提供仿冒软件的信息，防止用户因下载仿冒应用而导致的资金损失。</p>\n<p>通过风险发现方案，金融应用开发者可及时发现应用中存在的安全问题，进而采取安全增强措施提高安全等级，减少损失。</p>\n<ul>\n<li>应用组件：防止被攻击、信息泄漏、客户端请求伪造</li>\n</ul>\n<p>安全组件SDK从代码层面，贯穿编译的整个过程，保护应用的业务安全。具备安全存储、安全加密、安全签名、安全检测等功能特点。阿里聚安全提供SDK类型的安全组件供开发者进行接入，通过实现多层次的安全机制打造安全沙箱环境来防止应用被黑客或木马所攻击。服务端提供应用安全监控服务，帮助开发者了解所发布应用的安全状况与安全趋势。</p>\n<ul>\n<li>应用加固：提升安全等级，防止应用被逆向破解</li>\n</ul>\n<p>应用加固服务针对安装包直接加固，无需二次开发。应用加固增加了应用逻辑的分析成本，使得攻击者无法使用手动或自动化工具快速获取应用逻辑。并且防恶意篡改，防内存窃取，防动态跟踪和注入等风险。</p>\n<ul>\n<li>实时监控、安全审计</li>\n</ul>\n<p>通过在软件开发生命周期的每个阶段执行必要的安全控制活动或任务，避免设计缺陷、逻辑缺陷和代码缺陷，保证软件在开发生命周期内的安全性得到最大的提升，真正做到从应用产生的源头来避免安全风险。</p>\n<h2 id=\"了解更多\"><a href=\"#了解更多\" class=\"headerlink\" title=\"了解更多\"></a>了解更多</h2><blockquote>\n<p>关于支付宝App架构技术演进的更多参考：</p>\n</blockquote>\n<ul>\n<li><a href=\"https://yq.aliyun.com/articles/59942?spm=5176.100239.blogcont58908.21.53FcQg\" target=\"_blank\" rel=\"external\">快捷支付时代，支付宝如何保障亿级用户的性能稳定？</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/59944?spm=5176.100239.blogcont58908.41.53FcQg\" target=\"_blank\" rel=\"external\">万人低头时代，如何保障APP无线网络性能？</a></li>\n<li><a href=\"TechBlog/mpaas/IntroducingMPaas.md\">mPaaS公测正式开启</a></li>\n</ul>\n<hr>\n<h2 id=\"如果希望体验支付宝移动平台的能力，请关注蚂蚁云mPaaS公测！\"><a href=\"#如果希望体验支付宝移动平台的能力，请关注蚂蚁云mPaaS公测！\" class=\"headerlink\" title=\"如果希望体验支付宝移动平台的能力，请关注蚂蚁云mPaaS公测！\"></a>如果希望体验支付宝移动平台的能力，请关注蚂蚁云mPaaS公测！</h2><p>我们正尝试把完整的从云到端的支付宝移动能力开放给生态伙伴，但是产品化的过程是富有挑战性的，产品团队正在紧锣密鼓地完善mPaaS的开发者体验，同时也有重量级的产品特性正在开发中。后续我们将会继续通过文章、视频等形式，向大家介绍移动以及其他蚂蚁云产品的发展历程、特性和最佳实践。</p>\n<p>如果您希望了解更多内容，可以点击产品主页和文档中心：</p>\n<blockquote>\n<p><a href=\"https://www.cloud.alipay.com/\" target=\"_blank\" rel=\"external\">蚂蚁云</a><br><a href=\"https://www.cloud.alipay.com/products/MPAAS\" target=\"_blank\" rel=\"external\">mPaaS</a></p>\n</blockquote>\n<p>试用申请、体验反馈，同产品团队保持联系：</p>\n<blockquote>\n<p>业务咨询：fincloud@cloud.alipay.com<br>技术咨询：techsupport@cloud.alipay.com</p>\n</blockquote>\n","categories":[{"name":"方案实践","path":"api/categories/方案实践.json"}],"tags":[{"name":"方案实践","path":"api/tags/方案实践.json"},{"name":"移动平台","path":"api/tags/移动平台.json"}],"thumbnail":null,"author":"首仁"}